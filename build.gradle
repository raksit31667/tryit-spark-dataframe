plugins {
    id "java"
    id "jacoco"
    id "com.github.maiflai.scalatest" version "0.26"
    id "com.github.alisiikh.scalastyle" version "3.4.1"
    id "io.github.cosmicsilence.scalafix" version "0.1.7"
}

group "raksit.example.spark"
version "1.0-SNAPSHOT"

apply plugin: "java"
apply plugin: "scala"
apply plugin: "idea"

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    implementation "org.scala-lang:scala-library:${scalaVersion}"
    implementation "org.scala-lang:scala-reflect:${scalaVersion}"
    implementation "org.scala-lang:scala-compiler:${scalaVersion}"

    implementation "org.apache.spark:spark-mllib_2.11:${sparkVersion}"
    implementation "org.apache.spark:spark-sql_2.11:${sparkVersion}"
    implementation "org.apache.spark:spark-streaming-flume-assembly_2.11:${sparkVersion}"
    implementation "org.apache.spark:spark-graphx_2.11:${sparkVersion}"
    implementation "org.apache.spark:spark-launcher_2.11:${sparkVersion}"
    implementation "org.apache.spark:spark-catalyst_2.11:${sparkVersion}"
    implementation "org.apache.spark:spark-streaming_2.11:${sparkVersion}"
    implementation "org.apache.spark:spark-core_2.11:${sparkVersion}"

    implementation "commons-io:commons-io:2.7"
    implementation "com.github.pureconfig:pureconfig_2.11:0.12.3"
    implementation "com.amazon.deequ:deequ:1.0.5"
    implementation "org.apache.spark:spark-streaming-kafka-0-10_2.11:${sparkVersion}"
    testImplementation "com.holdenkarau:spark-testing-base_2.11:${sparkVersion}_0.14.0"
    testImplementation "com.h2database:h2:1.4.200"
    testImplementation "org.testcontainers:testcontainers:1.14.3"
    testImplementation "org.testcontainers:kafka:1.14.3"
    testRuntime "org.pegdown:pegdown:1.6.0"
}

task run(type: JavaExec, dependsOn: classes) {
    main = mainClassFile
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

idea {
    module {
        // IntelliJ does not know about the standard idiom of provided as used in managing
        // uber/shaded jar dependencies. Make it so!
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

scalastyle {
    scalaVersion = "2.11"
    scalastyleVersion = "1.4.0"
    config = file("${projectDir}/config/scalastyle/scalastyle_config.xml")
    sourceSets {
        main {
            output = file("$project.buildDir/reports/scalastyle/main.xml")
        }
        test {
            output = file("$project.buildDir/reports/scalastyle/test.xml")
        }
    }
}

scalafix {
    configFile = file("${projectDir}/config/scalafix/.scalafix.conf")
}

test {
    maxParallelForks(1)
}

def excludes = []

jacocoTestReport {
    reports {
        xml.enabled(false)
        csv.enabled(false)
        html.setDestination(file("${buildDir}/reports/jacoco"))
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludes)
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludes)
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

check.dependsOn(jacocoTestCoverageVerification)
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)
tasks.withType(Test) {
    task -> jacocoTestReport.dependsOn(task)
}
tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [ "-Ywarn-unused-import", "-Ywarn-adapted-args" ]
}